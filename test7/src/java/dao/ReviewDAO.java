package dao; 

import util.DBContext; 
import model.Review;   
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement; 
import java.sql.*; 
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Data Access Object (DAO) for managing Review entities in the database.
 * This class provides methods to perform CRUD (Create, Read, Update) operations
 * on the 'Reviews' table, as well as calculate average ratings, utilizing the DBContext
 * for database connections.
 */
public class ReviewDAO {
    // Instance of DBContext to obtain database connections
    private DBContext dbContext;

    /**
     * Constructor for ReviewDAO.
     * Initializes the DBContext instance.
     */
    public ReviewDAO() {
        this.dbContext = new DBContext();
    }

    /**
     * Retrieves all reviews for a specific product.
     * Reviews are sorted by 'reviewedAt' date in descending order (newest first).
     *
     * @param productId The ID of the product whose reviews are to be retrieved.
     * @return An ArrayList containing Review objects, or an empty ArrayList if no reviews are found.
     */
    public ArrayList<Review> getReviewsByProduct(int productId) {
        ArrayList<Review> reviews = new ArrayList<>();
        String sql = "SELECT reviewId, productId, userId, rating, comment, reviewedAt FROM Reviews WHERE productId = ? ORDER BY reviewedAt DESC";

        try (Connection conn = dbContext.getConnection(); 
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, productId); 
            ResultSet rs = pstmt.executeQuery(); 

            while (rs.next()) {
                int reviewId = rs.getInt("reviewId");
                int fetchedProductId = rs.getInt("productId");
                int userId = rs.getInt("userId");
                int rating = rs.getInt("rating");
                String comment = rs.getString("comment");
                Timestamp reviewedAt = rs.getTimestamp("reviewedAt");

                Review review = new Review(reviewId, fetchedProductId, userId, rating, comment, reviewedAt);
                reviews.add(review); 
            }
        } catch (SQLException e) {
            Logger.getLogger(ReviewDAO.class.getName()).log(Level.SEVERE, "Error retrieving reviews for product ID: " + productId, e);
        }
        return reviews; // Return the list of reviews
    }

    /**
     * Adds a new review to the database.
     * The 'reviewId' is auto-generated by the database, and 'reviewedAt' defaults to GETDATE().
     * If successful, the 'reviewId' of the passed Review object will be updated with the newly generated ID.
     *
     * @param review The Review object containing productId, userId, rating, and comment.
     * @return true if the review was added successfully, false otherwise (e.g., due to a database error or constraint violation).
     */
    public boolean addReview(Review review) {
        String sql = "INSERT INTO Reviews (productId, userId, rating, comment, reviewedAt) VALUES (?, ?, ?, ?, GETDATE())";
        boolean success = false;
        ResultSet rs = null;

        try (Connection conn = dbContext.getConnection();
             // Use Statement.RETURN_GENERATED_KEYS to retrieve the auto-generated ID
             PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setInt(1, review.getProductId());  
            pstmt.setInt(2, review.getUserId());     
            pstmt.setInt(3, review.getRating());     
            pstmt.setString(4, review.getComment()); 

            int affectedRows = pstmt.executeUpdate(); 

            if (affectedRows > 0) {
                rs = pstmt.getGeneratedKeys();
                if (rs.next()) {
                    review.setReviewId(rs.getInt(1)); 
                    success = true;
                }
            }
        } catch (SQLException e) {
            Logger.getLogger(ReviewDAO.class.getName()).log(Level.SEVERE, "Error adding review: " + review.toString(), e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    Logger.getLogger(ReviewDAO.class.getName()).log(Level.WARNING, "Error closing ResultSet after adding review", e);
                }
            }
        }
        return success; 
    }

    /**
     * Deletes a review from the database based on its unique ID.
     *
     * @param reviewId The ID of the review to be deleted.
     * @return true if the review was successfully deleted, false otherwise (e.g., review not found or database error).
     */
    public boolean deleteReview(int reviewId) {
        String sql = "DELETE FROM Reviews WHERE reviewId = ?";

        try (Connection conn = dbContext.getConnection(); // Obtain a new connection from DBContext
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, reviewId); // Set the reviewId parameter

            int affectedRows = pstmt.executeUpdate(); // Execute the delete operation
            return affectedRows > 0; // Return true if at least one row was affected (successfully deleted)

        } catch (SQLException e) {
            Logger.getLogger(ReviewDAO.class.getName()).log(Level.SEVERE, "Error deleting review with ID: " + reviewId, e);
            return false; // Return false to indicate failure
        }
    }

    /**
     * Calculates the average rating for a specific product.
     *
     * @param productId The ID of the product for which to calculate the average rating.
     * @return The average rating as a double. Returns 0.0 if the product has no reviews or if an error occurs.
     */
    public double getAverageRatingByProduct(int productId) {
        double averageRating = 0.0;
        // SQL query to calculate the average of the 'rating' column for a specific productId.
        // CAST(rating AS DECIMAL(3,2)) is used to ensure floating-point division and desired precision.
        String sql = "SELECT AVG(CAST(rating AS DECIMAL(3,2))) AS AverageRating FROM Reviews WHERE productId = ?";

        try (Connection conn = dbContext.getConnection(); // Obtain a new connection from DBContext
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, productId); // Set the productId parameter
            ResultSet rs = pstmt.executeQuery(); // Execute the query

            if (rs.next()) {
                // Retrieve the average rating. Use getDouble to handle potential null if no reviews exist.
                // rs.wasNull() can also be used, but getDouble() usually returns 0.0 for NULL.
                averageRating = rs.getDouble("AverageRating");
            }
        } catch (SQLException e) {
            Logger.getLogger(ReviewDAO.class.getName()).log(Level.SEVERE, "Error calculating average rating for product ID: " + productId, e);
        }
        return averageRating; 
    }
}
